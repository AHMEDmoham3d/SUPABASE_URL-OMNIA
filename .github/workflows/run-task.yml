// send-and-clean.js

const { createClient } = require('@supabase/supabase-js');
const nodemailer = require('nodemailer');

// ==== ENV VARS ====
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;
const EMAIL_TO = process.env.EMAIL_TO;
const TABLE_NAME = process.env.TABLE_NAME;

if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !EMAIL_USER || !EMAIL_PASS || !EMAIL_TO || !TABLE_NAME) {
  console.error('‚ùå One or more environment variables are missing.');
  process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function main() {
  const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();

  const { data, error } = await supabase
    .from(TABLE_NAME)
    .select('*')
    .lte('created_at', twoHoursAgo);

  if (error) {
    console.error('‚ùå Error fetching data:', error);
    process.exit(1);
  }

  if (!data || data.length === 0) {
    console.log('‚úÖ No data older than 2 hours.');
    return;
  }

  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: EMAIL_USER,
      pass: EMAIL_PASS,
    },
  });

  const mailOptions = {
    from: EMAIL_USER,
    to: EMAIL_TO,
    subject: `üßπ Supabase Backup - ${new Date().toLocaleString()}`,
    text: JSON.stringify(data, null, 2),
  };

  transporter.sendMail(mailOptions, async (err, info) => {
    if (err) {
      console.error('‚ùå Failed to send email:', err);
      return;
    }

    console.log('üìß Email sent:', info.response);

    const idsToDelete = data.map((row) => row.id);

    const { error: deleteError } = await supabase
      .from(TABLE_NAME)
      .delete()
      .in('id', idsToDelete);

    if (deleteError) {
      console.error('‚ùå Error deleting data:', deleteError);
      return;
    }

    console.log(`‚úÖ Deleted ${idsToDelete.length} records.`);
  });
}

main();
